// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=task
//

// Package task is a generated GoMock package.
package task

import (
	reflect "reflect"

	task "github.com/MGajendra22/GoFr/model/task"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockTaskServiceInterface is a mock of TaskServiceInterface interface.
type MockTaskServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskServiceInterfaceMockRecorder is the mock recorder for MockTaskServiceInterface.
type MockTaskServiceInterfaceMockRecorder struct {
	mock *MockTaskServiceInterface
}

// NewMockTaskServiceInterface creates a new mock instance.
func NewMockTaskServiceInterface(ctrl *gomock.Controller) *MockTaskServiceInterface {
	mock := &MockTaskServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTaskServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskServiceInterface) EXPECT() *MockTaskServiceInterfaceMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockTaskServiceInterface) All(c *gofr.Context) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", c)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockTaskServiceInterfaceMockRecorder) All(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockTaskServiceInterface)(nil).All), c)
}

// Complete mocks base method.
func (m *MockTaskServiceInterface) Complete(c *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockTaskServiceInterfaceMockRecorder) Complete(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockTaskServiceInterface)(nil).Complete), c, id)
}

// Create mocks base method.
func (m *MockTaskServiceInterface) Create(c *gofr.Context, t task.Task) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, t)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceInterfaceMockRecorder) Create(c, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskServiceInterface)(nil).Create), c, t)
}

// Delete mocks base method.
func (m *MockTaskServiceInterface) Delete(c *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceInterfaceMockRecorder) Delete(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskServiceInterface)(nil).Delete), c, id)
}

// GetTask mocks base method.
func (m *MockTaskServiceInterface) GetTask(c *gofr.Context, id int) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", c, id)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskServiceInterfaceMockRecorder) GetTask(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskServiceInterface)(nil).GetTask), c, id)
}

// GetTasksByUserID mocks base method.
func (m *MockTaskServiceInterface) GetTasksByUserID(c *gofr.Context, userId int) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserID", c, userId)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserID indicates an expected call of GetTasksByUserID.
func (mr *MockTaskServiceInterfaceMockRecorder) GetTasksByUserID(c, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserID", reflect.TypeOf((*MockTaskServiceInterface)(nil).GetTasksByUserID), c, userId)
}
