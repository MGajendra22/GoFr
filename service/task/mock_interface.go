// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=task
//

// Package task is a generated GoMock package.
package task

import (
	reflect "reflect"

	task "github.com/MGajendra22/GoFr/model/task"
	user "github.com/MGajendra22/GoFr/model/user"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockTaskStoreInterface is a mock of TaskStoreInterface interface.
type MockTaskStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStoreInterfaceMockRecorder
	isgomock struct{}
}

// MockTaskStoreInterfaceMockRecorder is the mock recorder for MockTaskStoreInterface.
type MockTaskStoreInterfaceMockRecorder struct {
	mock *MockTaskStoreInterface
}

// NewMockTaskStoreInterface creates a new mock instance.
func NewMockTaskStoreInterface(ctrl *gomock.Controller) *MockTaskStoreInterface {
	mock := &MockTaskStoreInterface{ctrl: ctrl}
	mock.recorder = &MockTaskStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStoreInterface) EXPECT() *MockTaskStoreInterfaceMockRecorder {
	return m.recorder
}

// CompleteTask mocks base method.
func (m *MockTaskStoreInterface) CompleteTask(c *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockTaskStoreInterfaceMockRecorder) CompleteTask(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).CompleteTask), c, id)
}

// CreateTask mocks base method.
func (m *MockTaskStoreInterface) CreateTask(c *gofr.Context, arg1 task.Task) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", c, arg1)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskStoreInterfaceMockRecorder) CreateTask(c, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).CreateTask), c, arg1)
}

// DeleteTask mocks base method.
func (m *MockTaskStoreInterface) DeleteTask(c *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskStoreInterfaceMockRecorder) DeleteTask(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).DeleteTask), c, id)
}

// GetAllTask mocks base method.
func (m *MockTaskStoreInterface) GetAllTask(c *gofr.Context) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTask", c)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTask indicates an expected call of GetAllTask.
func (mr *MockTaskStoreInterfaceMockRecorder) GetAllTask(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).GetAllTask), c)
}

// GetByIDTask mocks base method.
func (m *MockTaskStoreInterface) GetByIDTask(c *gofr.Context, id int) (task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDTask", c, id)
	ret0, _ := ret[0].(task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDTask indicates an expected call of GetByIDTask.
func (mr *MockTaskStoreInterfaceMockRecorder) GetByIDTask(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).GetByIDTask), c, id)
}

// GetTasksByUserIDTask mocks base method.
func (m *MockTaskStoreInterface) GetTasksByUserIDTask(c *gofr.Context, userId int) ([]task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserIDTask", c, userId)
	ret0, _ := ret[0].([]task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserIDTask indicates an expected call of GetTasksByUserIDTask.
func (mr *MockTaskStoreInterfaceMockRecorder) GetTasksByUserIDTask(c, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserIDTask", reflect.TypeOf((*MockTaskStoreInterface)(nil).GetTasksByUserIDTask), c, userId)
}

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserServiceInterface) Get(c *gofr.Context, id int) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, id)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserServiceInterfaceMockRecorder) Get(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserServiceInterface)(nil).Get), c, id)
}
